name: Start Ray Cluster
description: Starts Ray cluster

inputs:
    - { name: name, type: String, description: "Ray cluster name" }
    - { name: num_workers, type: Integer, description: "number of workers" }
    - {
          name: cluster_up_tmout,
          type: Integer,
          description: "Minutes to wait for the Ray cluster achived min_worker number",
      }
    - {
          name: wait_cluster_ready_tmout,
          type: Integer,
          description: "Seconds to wait for Ray cluster to become available",
      }
    - {
          name: wait_cluster_nodes_ready_tmout,
          type: Integer,
          description: "Seconds to wait for cluster nodes to be ready",
      }
    - { name: cpus, type: Integer, description: "cpus per worker" }
    - { name: memory, type: Integer, description: "Memory per worker" }
    - { name: image, type: String, default: "", description: "image for Ray cluster" }

outputs:
    - { name: output, type: String, description: "Ray dashboard" }

implementation:
    container:
        image: us.icr.io/cil15-shared-registry/preprocessing-pipelines/ray-operations:0.0.2
        # command is a list of strings (command-line arguments).
        # The YAML language has two syntaxes for lists and you can use either of them.
        # Here we use the "flow syntax" - comma-separated strings inside square brackets.
        command: [
                python,
                # Path of the program inside the container
                /pipelines/component/src/start-ray-cluster.py,
                --name,
                { inputValue: name },
                --min_worker,
                { inputValue: min_worker },
                --max_worker,
                { inputValue: max_worker },
                --cluster_up_tmout,
                { inputValue: cluster_up_tmout },
                --wait_cluster_ready_tmout,
                { inputValue: wait_cluster_ready_tmout },
                --wait_cluster_nodes_ready_tmout,
                { inputValue: wait_cluster_nodes_ready_tmout },
                --cpus,
                { inputValue: cpus },
                --memory,
                { inputValue: memory },
                --image,
                { inputValue: image },
                --output_ray_uri_path,
                { outputPath: output },
            ]
